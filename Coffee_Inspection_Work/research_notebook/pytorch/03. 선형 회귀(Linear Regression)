{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"03. 선형 회귀(Linear Regression)","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOjIa/oNjfBnKmCZJNuQYUp"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"eEg9O9XDVpO7","colab_type":"text"},"source":["# 01. 선형 회귀(Linear Regression)"]},{"cell_type":"markdown","metadata":{"id":"K5qpvJ3pV1ts","colab_type":"text"},"source":["## 1. 데이터에 대한 이해"]},{"cell_type":"markdown","metadata":{"id":"qvgshpa5V6Hd","colab_type":"text"},"source":["## 2. 가설(Hypothesis) 수립"]},{"cell_type":"markdown","metadata":{"id":"V0Mm_aoTV9TW","colab_type":"text"},"source":["## 3. 비용 함수(Cost function)에 대한 이해"]},{"cell_type":"markdown","metadata":{"id":"wRqr3OrQWAc3","colab_type":"text"},"source":["## 4. 옵티마이저 - 경사 하강법(Gradient Descent)"]},{"cell_type":"markdown","metadata":{"id":"HzZHonN4WFti","colab_type":"text"},"source":["## 5. PyTorch로 선형 회귀 구현하기"]},{"cell_type":"markdown","metadata":{"id":"lPGFzcC_XpeX","colab_type":"text"},"source":["### 1. 기본 셋팅"]},{"cell_type":"code","metadata":{"id":"hAK10ZZsXfbv","colab_type":"code","colab":{}},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"un6n4QapXl5S","colab_type":"code","outputId":"7356d876-46ae-44c5-df84-d511dc91d3b4","executionInfo":{"status":"ok","timestamp":1587641933036,"user_tz":-540,"elapsed":2920,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["# 현재 실습하고 있는 파이썬 코드를 재실행해도 다음에도 같은 결과가 나오도록 랜덤 시드(random seed)를 줍니다.\n","torch.manual_seed(1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7fad9f2a42b0>"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"XwnfQ_62XwTJ","colab_type":"text"},"source":["### 2. 변수 선언"]},{"cell_type":"code","metadata":{"id":"WD5ZSGBMXzr3","colab_type":"code","colab":{}},"source":["x_train = torch.FloatTensor([[1],[2],[3]])\n","y_train = torch.FloatTensor([[4],[5],[6]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6rV8zhnMYE86","colab_type":"code","outputId":"d03d1f09-f4ab-4694-a0f2-6695121bb152","executionInfo":{"status":"ok","timestamp":1587641933037,"user_tz":-540,"elapsed":2913,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["print(x_train.shape, y_train.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["torch.Size([3, 1]) torch.Size([3, 1])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ORdT3Km7YIE1","colab_type":"text"},"source":["### 3. 가중치와 편향의 초기화"]},{"cell_type":"code","metadata":{"id":"8f_Vph5GYUcs","colab_type":"code","outputId":"e91275c4-664f-4710-add1-5d356c5b760d","executionInfo":{"status":"ok","timestamp":1587641933037,"user_tz":-540,"elapsed":2907,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["# 가중치 W를 0으로 초기화하고 학습을 통해 값이 변경되는 변수임을 명시\n","W = torch.zeros(1, requires_grad=True)\n","# 가중치 W를 출력\n","print(W)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tensor([0.], requires_grad=True)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kY6qIFCLYggy","colab_type":"code","outputId":"f82b4af2-a0fd-42cc-9f00-3e265e2ee03c","executionInfo":{"status":"ok","timestamp":1587641933038,"user_tz":-540,"elapsed":2902,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["b = torch.zeros(1, requires_grad = True)\n","print(b)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tensor([0.], requires_grad=True)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_KdzsOkbY1xe","colab_type":"text"},"source":["### 4. 가설 세우기\n","H(x) = Wx + b"]},{"cell_type":"code","metadata":{"id":"Ys9YI8F4Y5ri","colab_type":"code","outputId":"fc9d14ec-4070-46d6-b056-2ca8943c81ab","executionInfo":{"status":"ok","timestamp":1587641933038,"user_tz":-540,"elapsed":2896,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":66}},"source":["hypothesis = x_train * W + b\n","print(hypothesis)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tensor([[0.],\n","        [0.],\n","        [0.]], grad_fn=<AddBackward0>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CcZr21e2ZEfc","colab_type":"text"},"source":["### 5. 비용 함수 선언하기"]},{"cell_type":"code","metadata":{"id":"5dwdgfRVZI9b","colab_type":"code","outputId":"3f30ef4c-8eea-4d5c-a34e-4b32dea64cd0","executionInfo":{"status":"ok","timestamp":1587641933038,"user_tz":-540,"elapsed":2890,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["cost = torch.mean((hypothesis - y_train)**2)\n","print(cost)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tensor(25.6667, grad_fn=<MeanBackward0>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9qD5uOzrZdy9","colab_type":"text"},"source":["### 6. 경사 하강법 구현하기"]},{"cell_type":"code","metadata":{"id":"7M4-m8nxZmi9","colab_type":"code","outputId":"9abffe8c-dbff-44cb-cbe5-b106357b18e2","executionInfo":{"status":"ok","timestamp":1587641933039,"user_tz":-540,"elapsed":2886,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":150}},"source":["optimizer = optim.SGD([W,b], lr = 0.01)\n","print(optimizer)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["SGD (\n","Parameter Group 0\n","    dampening: 0\n","    lr: 0.01\n","    momentum: 0\n","    nesterov: False\n","    weight_decay: 0\n",")\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LH0fr3UZZ6R-","colab_type":"code","colab":{}},"source":["# gradient를 0으로 초기화\n","optimizer.zero_grad()\n","# 비용 함수를 미분하여 gradient 계산\n","cost.backward()\n","# W와 b를 업데이트\n","optimizer.step()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y_kBlepUaO2q","colab_type":"text"},"source":["### 7. 전체코드"]},{"cell_type":"code","metadata":{"id":"yxhxXYojafof","colab_type":"code","outputId":"b10e3519-2ffe-4cb7-9783-26b72ea2d7c2","executionInfo":{"status":"ok","timestamp":1587641933961,"user_tz":-540,"elapsed":3800,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":533}},"source":["# 데이터\n","x_train = torch.FloatTensor([[1], [2], [3]])\n","y_train = torch.FloatTensor([[2], [4], [6]])\n","# 모델 초기화\n","W = torch.zeros(1, requires_grad=True)\n","b = torch.zeros(1, requires_grad=True)\n","# optimizer 설정\n","optimizer = optim.SGD([W, b], lr=0.01)\n","\n","nb_epochs = 3000 # 원하는만큼 경사 하강법을 반복\n","for epoch in range(nb_epochs + 1):\n","\n","    # H(x) 계산\n","    hypothesis = x_train * W + b\n","\n","    # cost 계산\n","    cost = torch.mean((hypothesis - y_train) ** 2)\n","\n","    # cost로 H(x) 개선\n","    optimizer.zero_grad()\n","    cost.backward()\n","    optimizer.step()\n","\n","    # 100번마다 로그 출력\n","    if epoch % 100 == 0:\n","        print('Epoch {:4d}/{} W: {:.3f}, b: {:.3f} Cost: {:.6f}'.format(\n","            epoch, nb_epochs, W.item(), b.item(), cost.item()\n","        ))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch    0/3000 W: 0.187, b: 0.080 Cost: 18.666666\n","Epoch  100/3000 W: 1.746, b: 0.578 Cost: 0.048171\n","Epoch  200/3000 W: 1.800, b: 0.454 Cost: 0.029767\n","Epoch  300/3000 W: 1.843, b: 0.357 Cost: 0.018394\n","Epoch  400/3000 W: 1.876, b: 0.281 Cost: 0.011366\n","Epoch  500/3000 W: 1.903, b: 0.221 Cost: 0.007024\n","Epoch  600/3000 W: 1.924, b: 0.174 Cost: 0.004340\n","Epoch  700/3000 W: 1.940, b: 0.136 Cost: 0.002682\n","Epoch  800/3000 W: 1.953, b: 0.107 Cost: 0.001657\n","Epoch  900/3000 W: 1.963, b: 0.084 Cost: 0.001024\n","Epoch 1000/3000 W: 1.971, b: 0.066 Cost: 0.000633\n","Epoch 1100/3000 W: 1.977, b: 0.052 Cost: 0.000391\n","Epoch 1200/3000 W: 1.982, b: 0.041 Cost: 0.000242\n","Epoch 1300/3000 W: 1.986, b: 0.032 Cost: 0.000149\n","Epoch 1400/3000 W: 1.989, b: 0.025 Cost: 0.000092\n","Epoch 1500/3000 W: 1.991, b: 0.020 Cost: 0.000057\n","Epoch 1600/3000 W: 1.993, b: 0.016 Cost: 0.000035\n","Epoch 1700/3000 W: 1.995, b: 0.012 Cost: 0.000022\n","Epoch 1800/3000 W: 1.996, b: 0.010 Cost: 0.000013\n","Epoch 1900/3000 W: 1.997, b: 0.008 Cost: 0.000008\n","Epoch 2000/3000 W: 1.997, b: 0.006 Cost: 0.000005\n","Epoch 2100/3000 W: 1.998, b: 0.005 Cost: 0.000003\n","Epoch 2200/3000 W: 1.998, b: 0.004 Cost: 0.000002\n","Epoch 2300/3000 W: 1.999, b: 0.003 Cost: 0.000001\n","Epoch 2400/3000 W: 1.999, b: 0.002 Cost: 0.000001\n","Epoch 2500/3000 W: 1.999, b: 0.002 Cost: 0.000000\n","Epoch 2600/3000 W: 1.999, b: 0.001 Cost: 0.000000\n","Epoch 2700/3000 W: 2.000, b: 0.001 Cost: 0.000000\n","Epoch 2800/3000 W: 2.000, b: 0.001 Cost: 0.000000\n","Epoch 2900/3000 W: 2.000, b: 0.001 Cost: 0.000000\n","Epoch 3000/3000 W: 2.000, b: 0.001 Cost: 0.000000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DD5PFKJ7bJRV","colab_type":"text"},"source":["## 6. optimizer.zero_grad() 가 필요한 이유"]},{"cell_type":"code","metadata":{"id":"xkUe5Dv6cVEN","colab_type":"code","outputId":"6e8f0cd2-d5cf-4c4a-e37b-6a15744edd07","executionInfo":{"status":"ok","timestamp":1587641933962,"user_tz":-540,"elapsed":3796,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":366}},"source":["import torch\n","W = torch.tensor(2.0, requires_grad = True)\n","\n","nb_epochs = 20\n","for epoch in range(nb_epochs + 1):\n","  z = 2*W\n","  z.backward()\n","  print(f'수식을 W로 미분한 값 : {W.grad}')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["수식을 W로 미분한 값 : 2.0\n","수식을 W로 미분한 값 : 4.0\n","수식을 W로 미분한 값 : 6.0\n","수식을 W로 미분한 값 : 8.0\n","수식을 W로 미분한 값 : 10.0\n","수식을 W로 미분한 값 : 12.0\n","수식을 W로 미분한 값 : 14.0\n","수식을 W로 미분한 값 : 16.0\n","수식을 W로 미분한 값 : 18.0\n","수식을 W로 미분한 값 : 20.0\n","수식을 W로 미분한 값 : 22.0\n","수식을 W로 미분한 값 : 24.0\n","수식을 W로 미분한 값 : 26.0\n","수식을 W로 미분한 값 : 28.0\n","수식을 W로 미분한 값 : 30.0\n","수식을 W로 미분한 값 : 32.0\n","수식을 W로 미분한 값 : 34.0\n","수식을 W로 미분한 값 : 36.0\n","수식을 W로 미분한 값 : 38.0\n","수식을 W로 미분한 값 : 40.0\n","수식을 W로 미분한 값 : 42.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DUXaP14ucyg7","colab_type":"text"},"source":["# 02. 자동 미분(Autograd)"]},{"cell_type":"markdown","metadata":{"id":"tv54SbC0fQ3N","colab_type":"text"},"source":["## 1. 경사 하강법 리뷰"]},{"cell_type":"markdown","metadata":{"id":"U5_mOmygfZgj","colab_type":"text"},"source":["## 2. 자동 미분(Autograd) 실습하기"]},{"cell_type":"code","metadata":{"id":"h2gqqEbrfcZ_","colab_type":"code","colab":{}},"source":["import torch"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9dZNQfq-fd4_","colab_type":"code","colab":{}},"source":["w = torch.tensor(2.0, requires_grad = True)\n","y = w**2\n","z = 2*y + 5"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xAH6TCwJfpYD","colab_type":"code","colab":{}},"source":["z.backward()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YmeT66KAfsVb","colab_type":"code","outputId":"81a5bc9b-9281-4313-9675-1c8e65778b72","executionInfo":{"status":"ok","timestamp":1587641934497,"user_tz":-540,"elapsed":4320,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["print(f'수식을 w로 미분한 값 : {w.grad}')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["수식을 w로 미분한 값 : 8.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4OnjzXFrfyhG","colab_type":"text"},"source":["# 03. 다중 선형 회귀(Multivariable Linear regression)"]},{"cell_type":"markdown","metadata":{"id":"cz-Vj5sB1oiR","colab_type":"text"},"source":["## 1. 데이터에 대한 이해(Data Definition)\n","\n","|Quiz 1 (x1)|Quiz 2 (x2)|Quiz 3 (x3)|Final (y)|\n","|:--:|:--:|:--:|:--:|\n","|73|80|75|152|\n","|93|88|93|185|\n","|89|91|80|180|\n","|96|98|100|196|\n","|73|66|70|142|\n","\n","H(x) = w1x1 + w2x2 + w3x3 + b"]},{"cell_type":"markdown","metadata":{"id":"mpM0jaok2NhN","colab_type":"text"},"source":["## 2. 파이토치로 구현하기"]},{"cell_type":"code","metadata":{"id":"Ig30Dv_P1cSN","colab_type":"code","colab":{}},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"amB2ieSo1h1p","colab_type":"code","outputId":"4d603bf8-7d50-4d9c-8a7c-8dfeac951e7d","executionInfo":{"status":"ok","timestamp":1587642170453,"user_tz":-540,"elapsed":533,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["torch.manual_seed(1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7fad9f2a42b0>"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"t40__jsk1koI","colab_type":"code","colab":{}},"source":["# 훈련데이터\n","x1_train = torch.FloatTensor([[73],[93],[89],[96],[73]])\n","x2_train = torch.FloatTensor([[80],[88],[91],[98],[66]])\n","x3_train = torch.FloatTensor([[75],[93],[90],[100],[70]])\n","y_train = torch.FloatTensor([[152],[185],[180],[196],[142]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"u2vGWfEl2ug4","colab_type":"code","colab":{}},"source":["# 가중치 w와 편향 b 초기화\n","w1 = torch.zeros(1, requires_grad=True)\n","w2 = torch.zeros(1, requires_grad=True)\n","w3 = torch.zeros(1, requires_grad=True)\n","b = torch.zeros(1, requires_grad=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RN-9YF4V21gh","colab_type":"code","outputId":"6e35622b-a66a-4933-9366-b66bfe6f9b4d","executionInfo":{"status":"ok","timestamp":1587642655240,"user_tz":-540,"elapsed":17235,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":866}},"source":["# optimizer 설정\n","optimizer = optim.SGD([w1,w2,w3,b], lr = 1e-5)\n","\n","nb_epochs = 50000\n","for epoch in range(nb_epochs+1):\n","\n","  # H(x) 계산\n","  hypothesis = x1_train * w1 + x2_train * w2 + x3_train * w3 + b\n","\n","  # cost 계산\n","  cost = torch.mean((hypothesis - y_train)**2)\n","\n","  # cost로 H(x) 개선\n","  optimizer.zero_grad()\n","  cost.backward()\n","  optimizer.step()\n","\n","  # 100번마다 로그 출력\n","  if epoch % 1000 == 0:\n","    print('Epoch {:4d}/{} w1: {:.3f} w2: {:.3f} w3: {:.3f} b: {:.3f} Cost: {:.6f}'.format(\n","            epoch, nb_epochs, w1.item(), w2.item(), w3.item(), b.item(), cost.item()\n","        ))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch    0/50000 w1: 0.895 w2: 0.462 w3: 0.654 b: 0.021 Cost: 0.264060\n","Epoch 1000/50000 w1: 0.901 w2: 0.461 w3: 0.649 b: 0.021 Cost: 0.258154\n","Epoch 2000/50000 w1: 0.906 w2: 0.461 w3: 0.644 b: 0.022 Cost: 0.253037\n","Epoch 3000/50000 w1: 0.911 w2: 0.461 w3: 0.639 b: 0.023 Cost: 0.248481\n","Epoch 4000/50000 w1: 0.915 w2: 0.461 w3: 0.635 b: 0.024 Cost: 0.244309\n","Epoch 5000/50000 w1: 0.919 w2: 0.462 w3: 0.630 b: 0.025 Cost: 0.240432\n","Epoch 6000/50000 w1: 0.923 w2: 0.463 w3: 0.626 b: 0.026 Cost: 0.236799\n","Epoch 7000/50000 w1: 0.926 w2: 0.464 w3: 0.621 b: 0.027 Cost: 0.233378\n","Epoch 8000/50000 w1: 0.930 w2: 0.465 w3: 0.617 b: 0.028 Cost: 0.230131\n","Epoch 9000/50000 w1: 0.933 w2: 0.466 w3: 0.612 b: 0.028 Cost: 0.227058\n","Epoch 10000/50000 w1: 0.936 w2: 0.467 w3: 0.608 b: 0.029 Cost: 0.224134\n","Epoch 11000/50000 w1: 0.939 w2: 0.468 w3: 0.604 b: 0.030 Cost: 0.221353\n","Epoch 12000/50000 w1: 0.942 w2: 0.469 w3: 0.600 b: 0.031 Cost: 0.218700\n","Epoch 13000/50000 w1: 0.945 w2: 0.471 w3: 0.596 b: 0.032 Cost: 0.216179\n","Epoch 14000/50000 w1: 0.947 w2: 0.472 w3: 0.592 b: 0.032 Cost: 0.213773\n","Epoch 15000/50000 w1: 0.950 w2: 0.473 w3: 0.588 b: 0.033 Cost: 0.211479\n","Epoch 16000/50000 w1: 0.952 w2: 0.474 w3: 0.585 b: 0.034 Cost: 0.209303\n","Epoch 17000/50000 w1: 0.955 w2: 0.475 w3: 0.581 b: 0.035 Cost: 0.207225\n","Epoch 18000/50000 w1: 0.957 w2: 0.477 w3: 0.578 b: 0.035 Cost: 0.205246\n","Epoch 19000/50000 w1: 0.960 w2: 0.478 w3: 0.574 b: 0.036 Cost: 0.203359\n","Epoch 20000/50000 w1: 0.962 w2: 0.479 w3: 0.571 b: 0.037 Cost: 0.201555\n","Epoch 21000/50000 w1: 0.964 w2: 0.480 w3: 0.568 b: 0.037 Cost: 0.199853\n","Epoch 22000/50000 w1: 0.966 w2: 0.481 w3: 0.564 b: 0.038 Cost: 0.198211\n","Epoch 23000/50000 w1: 0.968 w2: 0.482 w3: 0.561 b: 0.039 Cost: 0.196663\n","Epoch 24000/50000 w1: 0.970 w2: 0.483 w3: 0.558 b: 0.039 Cost: 0.195181\n","Epoch 25000/50000 w1: 0.972 w2: 0.484 w3: 0.555 b: 0.040 Cost: 0.193773\n","Epoch 26000/50000 w1: 0.974 w2: 0.485 w3: 0.552 b: 0.041 Cost: 0.192423\n","Epoch 27000/50000 w1: 0.976 w2: 0.486 w3: 0.550 b: 0.041 Cost: 0.191137\n","Epoch 28000/50000 w1: 0.978 w2: 0.487 w3: 0.547 b: 0.042 Cost: 0.189920\n","Epoch 29000/50000 w1: 0.980 w2: 0.488 w3: 0.544 b: 0.042 Cost: 0.188761\n","Epoch 30000/50000 w1: 0.982 w2: 0.489 w3: 0.542 b: 0.043 Cost: 0.187649\n","Epoch 31000/50000 w1: 0.983 w2: 0.489 w3: 0.539 b: 0.044 Cost: 0.186596\n","Epoch 32000/50000 w1: 0.985 w2: 0.490 w3: 0.537 b: 0.044 Cost: 0.185583\n","Epoch 33000/50000 w1: 0.987 w2: 0.491 w3: 0.534 b: 0.045 Cost: 0.184627\n","Epoch 34000/50000 w1: 0.988 w2: 0.492 w3: 0.532 b: 0.045 Cost: 0.183713\n","Epoch 35000/50000 w1: 0.990 w2: 0.493 w3: 0.529 b: 0.046 Cost: 0.182836\n","Epoch 36000/50000 w1: 0.991 w2: 0.493 w3: 0.527 b: 0.047 Cost: 0.182007\n","Epoch 37000/50000 w1: 0.993 w2: 0.494 w3: 0.525 b: 0.047 Cost: 0.181216\n","Epoch 38000/50000 w1: 0.994 w2: 0.495 w3: 0.523 b: 0.048 Cost: 0.180459\n","Epoch 39000/50000 w1: 0.996 w2: 0.496 w3: 0.521 b: 0.048 Cost: 0.179744\n","Epoch 40000/50000 w1: 0.997 w2: 0.496 w3: 0.519 b: 0.049 Cost: 0.179054\n","Epoch 41000/50000 w1: 0.998 w2: 0.497 w3: 0.517 b: 0.049 Cost: 0.178404\n","Epoch 42000/50000 w1: 1.000 w2: 0.498 w3: 0.515 b: 0.050 Cost: 0.177774\n","Epoch 43000/50000 w1: 1.001 w2: 0.498 w3: 0.513 b: 0.050 Cost: 0.177177\n","Epoch 44000/50000 w1: 1.002 w2: 0.499 w3: 0.511 b: 0.051 Cost: 0.176614\n","Epoch 45000/50000 w1: 1.003 w2: 0.499 w3: 0.509 b: 0.051 Cost: 0.176079\n","Epoch 46000/50000 w1: 1.005 w2: 0.500 w3: 0.507 b: 0.052 Cost: 0.175564\n","Epoch 47000/50000 w1: 1.006 w2: 0.501 w3: 0.506 b: 0.052 Cost: 0.175067\n","Epoch 48000/50000 w1: 1.007 w2: 0.501 w3: 0.504 b: 0.053 Cost: 0.174604\n","Epoch 49000/50000 w1: 1.008 w2: 0.502 w3: 0.502 b: 0.053 Cost: 0.174164\n","Epoch 50000/50000 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.054 Cost: 0.173737\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0urPOb2i3frU","colab_type":"text"},"source":["## 4. 행렬 연산을 고려하여 파이토치로 구현하기\n","\n"]},{"cell_type":"code","metadata":{"id":"KMcGZN1Z4fix","colab_type":"code","outputId":"6401f122-f539-4aa7-f13a-9a40ff322923","executionInfo":{"status":"ok","timestamp":1587642866280,"user_tz":-540,"elapsed":1037,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":50}},"source":["x_train = torch.FloatTensor([\n","  [73,80,75],\n","  [93,88,93],\n","  [89,91,90],\n","  [96,98,100],\n","  [73,66,70]\n","])\n","y_train = torch.FloatTensor([[152],[185],[180],[196],[142]])\n","\n","print(x_train.size())\n","print(y_train.size())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["torch.Size([5, 3])\n","torch.Size([5, 1])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pWZCHU5l45Yo","colab_type":"code","colab":{}},"source":["W = torch.zeros((3,1), requires_grad=True)\n","b = torch.zeros(1, requires_grad=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y527gHo_5IGR","colab_type":"code","colab":{}},"source":["hypothesis = x_train.matmul(W) + b"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ka1MWR0K5Pfx","colab_type":"code","outputId":"f16fecd7-2e52-4885-b86e-8148e43b16d7","executionInfo":{"status":"ok","timestamp":1587643133013,"user_tz":-540,"elapsed":620,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":366}},"source":["# optimizer 설정\n","optimizer = optim.SGD([W,b], lr=1e-5)\n","\n","nb_epochs = 20\n","for epoch in range(nb_epochs + 1):\n","  # H(x) 계산\n","  # 편향 b는 브로드 캐스팅되어 각 샘플에 더해집니다.\n","  hypothesis = x_train.matmul(W) + b\n","\n","  # cost 계산\n","  cost = torch.mean((hypothesis - y_train)**2)\n","\n","  # cost로 H(x) 개선\n","  optimizer.zero_grad()\n","  cost.backward()\n","  optimizer.step()\n","\n","  print('Epoch {:4d}/{} w1: {:.3f} w2: {:.3f} w3: {:.3f} b: {:.3f} Cost: {:.6f}'.format(\n","            epoch, nb_epochs, w1.item(), w2.item(), w3.item(), b.item(), cost.item()\n","        ))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch    0/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.603572\n","Epoch    1/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.602870\n","Epoch    2/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.602174\n","Epoch    3/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.601473\n","Epoch    4/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.600761\n","Epoch    5/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.600087\n","Epoch    6/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.599370\n","Epoch    7/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.598685\n","Epoch    8/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.597979\n","Epoch    9/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.597292\n","Epoch   10/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.596590\n","Epoch   11/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.595898\n","Epoch   12/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.595211\n","Epoch   13/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.594514\n","Epoch   14/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.593807\n","Epoch   15/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.593116\n","Epoch   16/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.592426\n","Epoch   17/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.591729\n","Epoch   18/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.591051\n","Epoch   19/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.590355\n","Epoch   20/20 w1: 1.009 w2: 0.502 w3: 0.501 b: 0.008 Cost: 1.589660\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IB3Sbz-X2bG8","colab_type":"text"},"source":["# 04. nn.Module로 구현하는 선형 회귀\n","- pytorch에서 이미 구현되어 있는 함수를 불러와서 사용"]},{"cell_type":"code","metadata":{"id":"9UY85HIM51i9","colab_type":"code","colab":{}},"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","# model = nn.Linear(input_dim, output_dim)\n","# cost = F.mse_loss(prediction, y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pWsIqkj92sRV","colab_type":"text"},"source":["## 1. 단순 선형 회귀 구현하기"]},{"cell_type":"code","metadata":{"id":"B03Ruu3U3Era","colab_type":"code","colab":{}},"source":["# 필요한 모듈 가져오기\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_sVcwEvY3MlW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"1a47c63f-d9c0-454a-d2db-e3b5f9950e58","executionInfo":{"status":"ok","timestamp":1587794099244,"user_tz":-540,"elapsed":852,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# manual_seed 선언\n","torch.manual_seed(1)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f7ee32d5c10>"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"bM92t8hV3SQx","colab_type":"code","colab":{}},"source":["# 데이터\n","x_train = torch.FloatTensor([[1],[2],[3]])\n","y_train = torch.FloatTensor([[2],[4],[6]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5FWZAhV43iH7","colab_type":"code","colab":{}},"source":["# 모델을 선언 및 초기화, 단순 선형 회귀이므로 input_dim = 1, output_dim = 1\n","model = nn.Linear(1,1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1_kL5Yk63w9p","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"5bab8751-deb9-4804-f232-ecfabd3f5f3a","executionInfo":{"status":"ok","timestamp":1587794100340,"user_tz":-540,"elapsed":685,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 첫번째 값 : W\n","# 두번째 값 : b\n","# 두 값 랜덤 초기화된 상태\n","print(list(model.parameters()))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["[Parameter containing:\n","tensor([[0.5153]], requires_grad=True), Parameter containing:\n","tensor([-0.4414], requires_grad=True)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pUv1C2CP33Ii","colab_type":"code","colab":{}},"source":["# optimizer 설정, 경사 하강법 SGD를 사용하고 learning rate를 의미하는 lr은 0.01\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.01)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CmIyLq364Pfc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"outputId":"74b536ce-9ba2-44d5-b021-395abbc30eda","executionInfo":{"status":"ok","timestamp":1587794101674,"user_tz":-540,"elapsed":1380,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 전체 훈련 데이터에 대해 경사 하강법을 2,000회 반복\n","nb_epochs = 2000\n","for epoch in range(nb_epochs+1):\n","\n","  # H(x) 계산\n","  prediction = model(x_train)\n","\n","  # cost 계산\n","  cost = F.mse_loss(prediction, y_train) # 파이토치에서 제공하는 평균 제곱 오차 함수\n","\n","  # cost로 H(x) 개선하는 부분\n","  # gradient를 0으로 초기화\n","  optimizer.zero_grad()\n","  # 비용 함수를 미분하여 gradient 계산\n","  cost.backward() # backward 연산\n","  # W와 b를 업데이트\n","  optimizer.step()\n","\n","  if epoch % 100 == 0 :\n","    # 100번마다 로그 출력\n","    print('Epoch {:4d}/{} Cost: {:.6f}'.format(epoch, nb_epochs, cost.item()))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Epoch    0/2000 Cost: 13.103541\n","Epoch  100/2000 Cost: 0.002791\n","Epoch  200/2000 Cost: 0.001724\n","Epoch  300/2000 Cost: 0.001066\n","Epoch  400/2000 Cost: 0.000658\n","Epoch  500/2000 Cost: 0.000407\n","Epoch  600/2000 Cost: 0.000251\n","Epoch  700/2000 Cost: 0.000155\n","Epoch  800/2000 Cost: 0.000096\n","Epoch  900/2000 Cost: 0.000059\n","Epoch 1000/2000 Cost: 0.000037\n","Epoch 1100/2000 Cost: 0.000023\n","Epoch 1200/2000 Cost: 0.000014\n","Epoch 1300/2000 Cost: 0.000009\n","Epoch 1400/2000 Cost: 0.000005\n","Epoch 1500/2000 Cost: 0.000003\n","Epoch 1600/2000 Cost: 0.000002\n","Epoch 1700/2000 Cost: 0.000001\n","Epoch 1800/2000 Cost: 0.000001\n","Epoch 1900/2000 Cost: 0.000000\n","Epoch 2000/2000 Cost: 0.000000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gs-G8zvH5K2O","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"48fe7c4f-d185-47f8-93e5-cd59349839ff","executionInfo":{"status":"ok","timestamp":1587794101677,"user_tz":-540,"elapsed":1234,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 임의의 입력 4를 선언\n","new_var = torch.FloatTensor([[4.0]])\n","# 입력한 값 4에 대해서 예측값 y를 리턴받아서 pred_y에 저장\n","pred_y = model(new_var) # forward 연산\n","# y = 2x 이므로 입력이 4라면 y가 8에 가까운 값이 나와야 제대로 학습이 된 것\n","print(\"훈련 후 입력이 4일 때의 예측값 :\", pred_y)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["훈련 후 입력이 4일 때의 예측값 : tensor([[7.9989]], grad_fn=<AddmmBackward>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hL29Cglf5h4D","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"3d43e59e-2461-4e5b-b797-2771b89b7c8b","executionInfo":{"status":"ok","timestamp":1587794166092,"user_tz":-540,"elapsed":550,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 학습 후의 W와 b의 값을 출력\n","print(list(model.parameters()))"],"execution_count":24,"outputs":[{"output_type":"stream","text":["[Parameter containing:\n","tensor([[1.9994]], requires_grad=True), Parameter containing:\n","tensor([0.0014], requires_grad=True)]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"e4h1afY56IGk","colab_type":"text"},"source":["- H(x) 식에 입력 x로부터 예측된 y를 얻는 것을 forward 연산\n","- 학습 전, prediction = model(x_train)은 x_train으로부터 예측값을 리턴하므로 forward 연산\n","- 학습 후, pred_y = model(new_var)는 임의의 값 new_var로부터 예측값을 리턴 하므로 forward 연산\n","- 학습 과정에서 비용 함수를 미분하여 기울기를 구하는 것을 backward 연산\n","- cost.backward()는 비용 함수로부터 기울기를 구하라는 의미이며 backward 연산"]},{"cell_type":"markdown","metadata":{"id":"AUI_ShG76AbH","colab_type":"text"},"source":["## 2. 다중 선형 회귀 구현하기"]},{"cell_type":"code","metadata":{"id":"2KmAWySG6wTd","colab_type":"code","colab":{}},"source":["# 필요한 모듈 가져오기\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"36Cr7kQ860lP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"704f6871-4613-4750-9ef1-ad32c210bf95","executionInfo":{"status":"ok","timestamp":1587794399905,"user_tz":-540,"elapsed":543,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# manual_seed() 선언해주기\n","torch.manual_seed(1)"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f7ee32d5c10>"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"UJJfXrZ168_6","colab_type":"code","colab":{}},"source":["# H(x) = w1x1 + w2x2 + w3x3 + b\n","# 데이터\n","x_train = torch.FloatTensor([\n","  [73,80,75],\n","  [93,88,93],\n","  [89,91,90],\n","  [96,98,100],\n","  [73,66,70]\n","])\n","y_train = torch.FloatTensor([[152],[185],[180],[196],[142]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GzOa915x7k5K","colab_type":"code","colab":{}},"source":["# 모델을 선언 및 초기화, 다중 선형 회귀이므로 input_dim = 3, output_dim = 1,\n","model = nn.Linear(3,1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8sk8e3JE77zS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"98fbadf8-36cb-42dd-fcd4-797af147dbdf","executionInfo":{"status":"ok","timestamp":1587794669350,"user_tz":-540,"elapsed":561,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# W, b의 값 랜덤 초기화\n","# W : (3,1)\n","# b : (1,) => 브로드 캐스팅 될 예정\n","print(list(model.parameters()))"],"execution_count":30,"outputs":[{"output_type":"stream","text":["[Parameter containing:\n","tensor([[ 0.2975, -0.2548, -0.1119]], requires_grad=True), Parameter containing:\n","tensor([0.2710], requires_grad=True)]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MCsNT-Qd7-ym","colab_type":"code","colab":{}},"source":["# optimizer 정의\n","# 학습률 0.00001 = 1e-5\n","optimizer = torch.optim.SGD(model.parameters(), lr = 1e-5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4GhQ6Apx8b7L","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"outputId":"af66a2b4-5735-4eb6-c89f-4f987c711070","executionInfo":{"status":"ok","timestamp":1587794985203,"user_tz":-540,"elapsed":976,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["nb_epochs = 2000\n","for epoch in range(nb_epochs + 1):\n","\n","  # H(x) 계산\n","  prediction = model(x_train)\n","  # model(x_train)은 model.forward(x_train)와 동일함.\n","\n","  # cost 계산\n","  cost = F.mse_loss(prediction, y_train) # 파이토치에서 제공하는 평균 제곱 오차 함수\n","\n","  # cost로 H(x) 개선하는 부분\n","  # gradient를 0으로 초기화\n","  optimizer.zero_grad()\n","  # 비용 함수를 미분하여 gradient 계산\n","  cost.backward()\n","  # W와 b를 업데이트\n","  optimizer.step()\n","\n","  if epoch % 100 == 0:\n","    # 100번마다 로그 출력\n","    print('Epoch {:4d}/{} Cost: {:.6f}'.format(epoch, nb_epochs, cost.item()))"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Epoch    0/2000 Cost: 31667.597656\n","Epoch  100/2000 Cost: 0.225988\n","Epoch  200/2000 Cost: 0.223910\n","Epoch  300/2000 Cost: 0.221930\n","Epoch  400/2000 Cost: 0.220059\n","Epoch  500/2000 Cost: 0.218271\n","Epoch  600/2000 Cost: 0.216572\n","Epoch  700/2000 Cost: 0.214955\n","Epoch  800/2000 Cost: 0.213415\n","Epoch  900/2000 Cost: 0.211952\n","Epoch 1000/2000 Cost: 0.210554\n","Epoch 1100/2000 Cost: 0.209230\n","Epoch 1200/2000 Cost: 0.207966\n","Epoch 1300/2000 Cost: 0.206768\n","Epoch 1400/2000 Cost: 0.205618\n","Epoch 1500/2000 Cost: 0.204526\n","Epoch 1600/2000 Cost: 0.203479\n","Epoch 1700/2000 Cost: 0.202486\n","Epoch 1800/2000 Cost: 0.201539\n","Epoch 1900/2000 Cost: 0.200637\n","Epoch 2000/2000 Cost: 0.199769\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WYpV-eV59Lyb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"5d53fb29-9cd6-4349-ec28-07bc636c84a8","executionInfo":{"status":"ok","timestamp":1587795079100,"user_tz":-540,"elapsed":572,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 임의의 입력 [73, 80, 75]를 선언\n","new_var = torch.FloatTensor([[73,80,75]])\n","# 입력한 값에 대해서 예측값 y를 리턴받아서 pred_y에 저장\n","pred_y = model(new_var)\n","print(\"훈련 후 입력이 73, 80, 75일 때의 예측값 :\", pred_y)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["훈련 후 입력이 73, 80, 75일 때의 예측값 : tensor([[151.2305]], grad_fn=<AddmmBackward>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N0HFde2E9i0i","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"20fff2e3-3a6f-4106-9433-ffeac78cce23","executionInfo":{"status":"ok","timestamp":1587795103259,"user_tz":-540,"elapsed":518,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["print(list(model.parameters()))"],"execution_count":34,"outputs":[{"output_type":"stream","text":["[Parameter containing:\n","tensor([[0.9778, 0.4539, 0.5768]], requires_grad=True), Parameter containing:\n","tensor([0.2802], requires_grad=True)]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0j3jXqh09ouu","colab_type":"text"},"source":["# 05. 클래스로 파이토치 모델 구현하기"]},{"cell_type":"markdown","metadata":{"id":"8BLvz3CV-xvr","colab_type":"text"},"source":["## 1. 모델을 클래스로 구현하기"]},{"cell_type":"code","metadata":{"id":"ph49zvd1-2SZ","colab_type":"code","colab":{}},"source":["# 이전 단순 선형 회귀 모델\n","# 모델을 선언 및 초기화, 단순 선형 최귀이므로 input_dim=1, output_dim=1\n","model = nn.Linear(1,1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ADM32ahl_EVO","colab_type":"code","colab":{}},"source":["# 단순 선형회귀 모델을 클래스로 구현\n","class LinearRegressionModel(nn.Module): # torch.nn.Modeule을 상속받는 파이썬 클래스\n","  \n","  # 생성자 정의 => 파이썬에서 객체가 갖는 속성을 초기화 하는 역할\n","  # 객체가 생성될 때 자동으로 호출\n","  def __init__(self):\n","    # super() 함수 => nn.Module 클래스의 속성들을 초기화\n","    super().__init__()\n","    self.linear = nn.Linear(1,1) # 단순 선형 회귀이므로 input_dim=1, output_dim=1\n","\n","  def forward(self, x):\n","    return self.linear(x)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dr_vZAKs_m_0","colab_type":"code","colab":{}},"source":["model = LinearRegressionModel()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xd6C02PB_pq_","colab_type":"code","colab":{}},"source":["# 이전 다중 선형 회귀 모델\n","# 모델을 선언 및 초기화, 다중 선형 회귀이므로 input_dim=3, output_dim=1\n","model = nn.Linear(3,1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4ysvYu7FAO7f","colab_type":"code","colab":{}},"source":["# 다중 선형 회귀 모델 클래스로 구현\n","class MultivariateLinearRegressionModel(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.linear = nn.Linear(3,1) # 다중 선형 회귀이므로 input_dim=3, output_dim=1\n","\n","  def forward(self, x):\n","    return self.linear(x)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GL0wHbqvAjz1","colab_type":"code","colab":{}},"source":["model = MultivariateLinearRegressionModel()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SR44_C1mAlV9","colab_type":"text"},"source":["## 단순 선형 회귀 클래스로 구현하기"]},{"cell_type":"code","metadata":{"id":"JKBFIjtgA2Yl","colab_type":"code","colab":{}},"source":["# 필요한 모듈 불러오기\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"MjnUqSRNA6xu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"afa28428-04cd-4b69-fb5b-e1cb591adcae","executionInfo":{"status":"ok","timestamp":1587795991354,"user_tz":-540,"elapsed":478,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# manual_seed 선언\n","torch.manual_seed(1)"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f7ee32d5c10>"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"CIu0ksR0BBj2","colab_type":"code","colab":{}},"source":["# 데이터\n","x_train = torch.FloatTensor([[1],[2],[3]])\n","y_train = torch.FloatTensor([[2],[4],[6]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sudfBHVxBPrp","colab_type":"code","colab":{}},"source":["# 클래스 선언\n","class LinearRegressionModel(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.linear = nn.Linear(1,1)\n","  \n","  def forward(self, x):\n","    return self.linear(x)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"j2pNfLD-BmrJ","colab_type":"code","colab":{}},"source":["# 모델 선언하기\n","model = LinearRegressionModel()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C1gryV6_BuSK","colab_type":"code","colab":{}},"source":["# optimizer 설정, 경사 하강법 SGD를 사용하고 learning rate를 의미하는 lr은 0.01\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.01)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VfMTc4lvB3f7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"outputId":"8f1acdc4-ef27-432b-e074-e8d6f982847c","executionInfo":{"status":"ok","timestamp":1587796432844,"user_tz":-540,"elapsed":1078,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 전체 훈련 데이터에 대해 경사 하강법 2,000회 반복\n","nb_epochs = 2000\n","for epoch in range(nb_epochs + 1):\n","\n","  # H(x) 계산\n","  prediction = model(x_train)\n","\n","  # cost 계산\n","  cost = F.mse_loss(prediction, y_train) # 파이토치에서 제공하는 평균 제곱 오차 함수\n","\n","  # cost로 H(x) 개선하는 부분\n","  # gradient를 0으로 초기화\n","  optimizer.zero_grad()\n","  # 비용 함수를 미분하여 gradient 계산\n","  cost.backward() # backward 연산\n","  # W와 b를 업데이트\n","  optimizer.step()\n","\n","  if epoch % 100 == 0:\n","    # 100번마다 로그 출력\n","    print('Epoch {:4d}/{} Cost: {:.6f}'.format(epoch, nb_epochs, cost.item()))"],"execution_count":52,"outputs":[{"output_type":"stream","text":["Epoch    0/2000 Cost: 13.103541\n","Epoch  100/2000 Cost: 0.002791\n","Epoch  200/2000 Cost: 0.001724\n","Epoch  300/2000 Cost: 0.001066\n","Epoch  400/2000 Cost: 0.000658\n","Epoch  500/2000 Cost: 0.000407\n","Epoch  600/2000 Cost: 0.000251\n","Epoch  700/2000 Cost: 0.000155\n","Epoch  800/2000 Cost: 0.000096\n","Epoch  900/2000 Cost: 0.000059\n","Epoch 1000/2000 Cost: 0.000037\n","Epoch 1100/2000 Cost: 0.000023\n","Epoch 1200/2000 Cost: 0.000014\n","Epoch 1300/2000 Cost: 0.000009\n","Epoch 1400/2000 Cost: 0.000005\n","Epoch 1500/2000 Cost: 0.000003\n","Epoch 1600/2000 Cost: 0.000002\n","Epoch 1700/2000 Cost: 0.000001\n","Epoch 1800/2000 Cost: 0.000001\n","Epoch 1900/2000 Cost: 0.000000\n","Epoch 2000/2000 Cost: 0.000000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"U-wQs9PeCojW","colab_type":"text"},"source":["## 3. 다중 선형 회귀 클래스로 구현하기\n"]},{"cell_type":"code","metadata":{"id":"RFv-W42yCw_Z","colab_type":"code","colab":{}},"source":["# 필요한 모듈 불러오기\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"l-vhX2IqC7TA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"41252bae-79e4-415e-8d2b-0bb8796f1897","executionInfo":{"status":"ok","timestamp":1587796514782,"user_tz":-540,"elapsed":588,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# manual_seed 선언하기\n","torch.manual_seed(1)"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f7ee32d5c10>"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"IdzYubPTDBU6","colab_type":"code","colab":{}},"source":["# 데이터\n","x_train = torch.FloatTensor([\n","  [73,80,75],\n","  [93,88,93],\n","  [89,91,90],\n","  [96,98,100],\n","  [73,66,70]\n","])\n","y_train = torch.FloatTensor([[152],[185],[180],[196],[142]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qQJ8B9s4DHNY","colab_type":"code","colab":{}},"source":["# 클래스 선언하기\n","class MultivariateLinearRegressionModel(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.linear = nn.Linear(3,1) # 다중 선형 회귀이므로 input_dim=3, output_dim=1\n","  \n","  def forward(self, x):\n","    return self.linear(x)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"e5Qu2rSJDkKA","colab_type":"code","colab":{}},"source":["model = MultivariateLinearRegressionModel()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KXDTCtrdDc7a","colab_type":"code","colab":{}},"source":["optimizer = torch.optim.SGD(model.parameters(), lr=1e-5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Q69RaOFDnRT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"outputId":"3bddfdd9-0337-4e0d-c1c5-40e2d80d9ac9","executionInfo":{"status":"ok","timestamp":1587796880250,"user_tz":-540,"elapsed":1097,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["nb_epochs = 2000\n","for epoch in range(nb_epochs + 1):\n","\n","  # H(x) 계산\n","  prediction = model(x_train)\n","  # model(x_train)은 model.forward(x_train)와 동일함\n","\n","  # cost 계산\n","  cost = F.mse_loss(prediction, y_train) # 파이토치에서 제공하는 평균 제곱 오차 함수\n","\n","  # cost로 H(x) 개선하는 부분\n","  # gradient를 0으로 초기화\n","  optimizer.zero_grad()\n","  # 비용 함수를 미분하여 gradient 계산\n","  cost.backward()\n","  # W와 b를 업데이트\n","  optimizer.step()\n","\n","  if epoch % 100 == 0:\n","    # 100번마다 로그 출력\n","    print('Epoch {:4d}/{} Cost: {:.6f}'.format(epoch, nb_epochs, cost.item()))\n"],"execution_count":59,"outputs":[{"output_type":"stream","text":["Epoch    0/2000 Cost: 31667.597656\n","Epoch  100/2000 Cost: 0.225988\n","Epoch  200/2000 Cost: 0.223910\n","Epoch  300/2000 Cost: 0.221930\n","Epoch  400/2000 Cost: 0.220059\n","Epoch  500/2000 Cost: 0.218271\n","Epoch  600/2000 Cost: 0.216572\n","Epoch  700/2000 Cost: 0.214955\n","Epoch  800/2000 Cost: 0.213415\n","Epoch  900/2000 Cost: 0.211952\n","Epoch 1000/2000 Cost: 0.210554\n","Epoch 1100/2000 Cost: 0.209230\n","Epoch 1200/2000 Cost: 0.207966\n","Epoch 1300/2000 Cost: 0.206768\n","Epoch 1400/2000 Cost: 0.205618\n","Epoch 1500/2000 Cost: 0.204526\n","Epoch 1600/2000 Cost: 0.203479\n","Epoch 1700/2000 Cost: 0.202486\n","Epoch 1800/2000 Cost: 0.201539\n","Epoch 1900/2000 Cost: 0.200637\n","Epoch 2000/2000 Cost: 0.199769\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ze8npB0REaaW","colab_type":"text"},"source":["# 06. 미니 배치와 데이터 로드(Mini Batch and Data Load)"]},{"cell_type":"markdown","metadata":{"id":"O6q7ygSoEl9w","colab_type":"text"},"source":["1. 미니 배치와 배치 크기(Mini Batch and Batch Size)"]},{"cell_type":"code","metadata":{"id":"x6V8ghTGErsj","colab_type":"code","colab":{}},"source":["x_train = torch.FloatTensor([[73, 80, 75],\n","                             [93, 88, 93],\n","                             [89, 91, 90],\n","                             [96, 98, 100],\n","                             [73, 66, 70]])\n","y_train = torch.FloatTensor([[152], [185], [180], [196], [142]])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sZDM8QtrEu7F","colab_type":"text"},"source":["## 2. 이터레이션(Iteration)"]},{"cell_type":"markdown","metadata":{"id":"u3JOnSycF9Xr","colab_type":"text"},"source":["## 3. 데이터 로드하기 (Data Load)\n","\n","- 데이터셋, 데이터 로더 제공\n","  - 미니 배치 학습, 데이터 셔플, 병렬 처리까지 간단히 수행\n","- Dataset을 커스텀 할 수도 있다.\n","- 여기서는 텐서를 입력받아 Dataset의 형태로 변환해주는 TensorDataset을 사용"]},{"cell_type":"code","metadata":{"id":"ZMRowq2WGCLE","colab_type":"code","colab":{}},"source":["# 필요한 모듈 불러오기\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1C1rRXfIHME_","colab_type":"code","colab":{}},"source":["# TensorDataset과 DataLoader를 불러오기\n","from torch.utils.data import TensorDataset\n","from torch.utils.data import DataLoader"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XTtV25C4Hcax","colab_type":"code","colab":{}},"source":["# 데이터\n","x_train  =  torch.FloatTensor([[73,  80,  75], \n","                               [93,  88,  93], \n","                               [89,  91,  90], \n","                               [96,  98,  100],   \n","                               [73,  66,  70]])  \n","y_train  =  torch.FloatTensor([[152],  [185],  [180],  [196],  [142]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PYQwc4hCHoGh","colab_type":"code","colab":{}},"source":["# dataset으로 저장\n","dataset = TensorDataset(x_train, y_train)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ku8pugB9Hs_x","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"0967124d-8a01-4df7-f303-cc4dd3a45ac2","executionInfo":{"status":"ok","timestamp":1587797762576,"user_tz":-540,"elapsed":469,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 데이터 형 확인\n","type(dataset), print(dataset)"],"execution_count":67,"outputs":[{"output_type":"stream","text":["<torch.utils.data.dataset.TensorDataset object at 0x7f7ee19be7f0>\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(torch.utils.data.dataset.TensorDataset, None)"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"RZEAnZPvHwpx","colab_type":"code","colab":{}},"source":["# 데이터로더\n","dataloader = DataLoader(dataset, batch_size = 2, shuffle = True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aR06w-DNH1gd","colab_type":"code","colab":{}},"source":["# 모델과 옵티마이저 선언\n","model = nn.Linear(3,1)\n","optimizer = torch.optim.SGD(model.parameters(), lr=1e-5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bVV_Gx-qIOw5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"a8e01185-1df8-4f26-8aeb-1701724dd9e6","executionInfo":{"status":"ok","timestamp":1587798431529,"user_tz":-540,"elapsed":1284,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 훈련\n","nb_epochs = 20\n","for epoch in range(nb_epochs + 1):\n","  for batch_idx, samples in enumerate(dataloader):\n","    x_train, y_train = samples\n","\n","    # H(x) 계산\n","    prediction = model(x_train)\n","\n","    # cost 계산\n","    cost = F.mse_loss(prediction, y_train)\n","\n","    # cost로 H(x) 계산\n","    optimizer.zero_grad()\n","    cost.backward()\n","    optimizer.step()\n","\n","    print('Epoch {:4d}/{} Batch {}/{} Cost: {:.6f}'.format(epoch, nb_epochs, batch_idx+1, len(dataloader), cost.item()))"],"execution_count":78,"outputs":[{"output_type":"stream","text":["Epoch    0/20 Batch 1/3 Cost: 0.791290\n","Epoch    0/20 Batch 2/3 Cost: 0.903406\n","Epoch    0/20 Batch 3/3 Cost: 1.043867\n","Epoch    1/20 Batch 1/3 Cost: 0.094531\n","Epoch    1/20 Batch 2/3 Cost: 1.264332\n","Epoch    1/20 Batch 3/3 Cost: 1.131274\n","Epoch    2/20 Batch 1/3 Cost: 0.168517\n","Epoch    2/20 Batch 2/3 Cost: 1.264373\n","Epoch    2/20 Batch 3/3 Cost: 0.743543\n","Epoch    3/20 Batch 1/3 Cost: 0.232294\n","Epoch    3/20 Batch 2/3 Cost: 1.792893\n","Epoch    3/20 Batch 3/3 Cost: 0.772315\n","Epoch    4/20 Batch 1/3 Cost: 1.160131\n","Epoch    4/20 Batch 2/3 Cost: 0.149315\n","Epoch    4/20 Batch 3/3 Cost: 1.117618\n","Epoch    5/20 Batch 1/3 Cost: 0.935811\n","Epoch    5/20 Batch 2/3 Cost: 0.832406\n","Epoch    5/20 Batch 3/3 Cost: 0.003208\n","Epoch    6/20 Batch 1/3 Cost: 0.934960\n","Epoch    6/20 Batch 2/3 Cost: 0.260412\n","Epoch    6/20 Batch 3/3 Cost: 1.384148\n","Epoch    7/20 Batch 1/3 Cost: 0.173696\n","Epoch    7/20 Batch 2/3 Cost: 1.969128\n","Epoch    7/20 Batch 3/3 Cost: 0.691058\n","Epoch    8/20 Batch 1/3 Cost: 0.648589\n","Epoch    8/20 Batch 2/3 Cost: 1.126623\n","Epoch    8/20 Batch 3/3 Cost: 0.003105\n","Epoch    9/20 Batch 1/3 Cost: 1.123326\n","Epoch    9/20 Batch 2/3 Cost: 0.557855\n","Epoch    9/20 Batch 3/3 Cost: 0.000143\n","Epoch   10/20 Batch 1/3 Cost: 0.549242\n","Epoch   10/20 Batch 2/3 Cost: 1.127053\n","Epoch   10/20 Batch 3/3 Cost: 0.000028\n","Epoch   11/20 Batch 1/3 Cost: 0.230600\n","Epoch   11/20 Batch 2/3 Cost: 1.336105\n","Epoch   11/20 Batch 3/3 Cost: 1.587855\n","Epoch   12/20 Batch 1/3 Cost: 1.103808\n","Epoch   12/20 Batch 2/3 Cost: 0.730841\n","Epoch   12/20 Batch 3/3 Cost: 0.395235\n","Epoch   13/20 Batch 1/3 Cost: 1.208579\n","Epoch   13/20 Batch 2/3 Cost: 0.625289\n","Epoch   13/20 Batch 3/3 Cost: 0.004253\n","Epoch   14/20 Batch 1/3 Cost: 0.560304\n","Epoch   14/20 Batch 2/3 Cost: 1.222424\n","Epoch   14/20 Batch 3/3 Cost: 0.753364\n","Epoch   15/20 Batch 1/3 Cost: 1.259595\n","Epoch   15/20 Batch 2/3 Cost: 0.385216\n","Epoch   15/20 Batch 3/3 Cost: 0.729479\n","Epoch   16/20 Batch 1/3 Cost: 0.138285\n","Epoch   16/20 Batch 2/3 Cost: 1.502874\n","Epoch   16/20 Batch 3/3 Cost: 1.830270\n","Epoch   17/20 Batch 1/3 Cost: 0.154220\n","Epoch   17/20 Batch 2/3 Cost: 1.400090\n","Epoch   17/20 Batch 3/3 Cost: 1.867450\n","Epoch   18/20 Batch 1/3 Cost: 1.205981\n","Epoch   18/20 Batch 2/3 Cost: 0.219187\n","Epoch   18/20 Batch 3/3 Cost: 0.912058\n","Epoch   19/20 Batch 1/3 Cost: 1.003043\n","Epoch   19/20 Batch 2/3 Cost: 0.721812\n","Epoch   19/20 Batch 3/3 Cost: 0.003908\n","Epoch   20/20 Batch 1/3 Cost: 0.942185\n","Epoch   20/20 Batch 2/3 Cost: 0.444298\n","Epoch   20/20 Batch 3/3 Cost: 1.041374\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jqJVVT75IdEE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"5c08ea0f-9e8b-4280-8c2e-5d642dd46c08","executionInfo":{"status":"ok","timestamp":1587798315432,"user_tz":-540,"elapsed":507,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 임의의 입력 [73, 80, 75]를 선언\n","new_var = torch.FloatTensor([[73, 80, 75]])\n","# 입력한 값 [73,80,75]에 대해서 예측값 y를 리턴받아서 pred_y에 저장\n","pred_y = model(new_var)\n","print(\"훈련 후 입력이 73, 80, 75일 때의 예측값 :\", pred_y)"],"execution_count":77,"outputs":[{"output_type":"stream","text":["훈련 후 입력이 73, 80, 75일 때의 예측값 : tensor([[151.6547]], grad_fn=<AddmmBackward>)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"y11Juv0LJ485","colab_type":"text"},"source":["# 07. 커스텀 데이터셋(Custom Dataset)"]},{"cell_type":"markdown","metadata":{"id":"A2gZjd5YLQFc","colab_type":"text"},"source":["## 1. 커스텀 데이터셋(Custom Dataset)"]},{"cell_type":"code","metadata":{"id":"l2lFLFupLUba","colab_type":"code","colab":{}},"source":["# 커스텀 데이터셋을 만들 때, 가장 기본 적인 뼈대\n","\n","class CustomDataset(torch.utils.data.Dataset):\n","  def __init__(self):\n","    # 데이터셋의 전처리를 해주는 부분\n","    pass\n","  def __len__(self):\n","    # 데이터셋의 길이, 즉, 총 샘플의 수를 적어주는 부분\n","    pass\n","  def __getitem__(self, idx):\n","    # 데이터셋에서 특징 1개의 샘플을 가져오는 함수\n","    pass"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NalGWaAJLmzf","colab_type":"text"},"source":["## 2.커스텀 데이터셋(Custom Dataset)으로 선형 회귀 구현하기"]},{"cell_type":"code","metadata":{"id":"Tx_XoXmoL3K_","colab_type":"code","colab":{}},"source":["# 필요한 모듈 가져오기\n","import torch\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset\n","from torch.utils.data import DataLoader"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TAsCaaN6L5ak","colab_type":"code","colab":{}},"source":["# Dataset 상속\n","class CustomDataset(Dataset):\n","  def __init__(self):\n","    self.x_data = ([\n","      [73,  80,  75], \n","      [93,  88,  93], \n","      [89,  91,  90], \n","      [96,  98,  100],   \n","      [73,  66,  70]\n","    ])\n","    self.y_data = [[152],  [185],  [180],  [196],  [142]]\n","\n","  # 총 데이터의 개수를 리턴\n","  def __len__(self):\n","    return len(self.x_data)\n","  \n","  # 인덱스를 입력받아 그에 매핑되는 입출력 데이터를 파이토치의 Tensor 형태로 리턴\n","  def __getitem__(self, idx):\n","    x = torch.FloatTensor(self.x_data[idx])\n","    y = torch.FloatTensor(self.y_data[idx])\n","    return x, y"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"u8qpRje8L7-A","colab_type":"code","colab":{}},"source":["# 데이터셋, 데이터로더 정의\n","dataset = CustomDataset()\n","dataloader = DataLoader(dataset, batch_size=2, shuffle=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AdRv79iuNFdL","colab_type":"code","colab":{}},"source":["# 모델, 옵티마이저 정의\n","model = torch.nn.Linear(3,1)\n","optimizer = torch.optim.SGD(model.parameters(), lr=1e-5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gG6D9FksNRS6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"98845a25-8532-4974-9fed-e1a3d785d5bf","executionInfo":{"status":"ok","timestamp":1587799801592,"user_tz":-540,"elapsed":1172,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 학습\n","nb_epochs = 20\n","for epoch in range(nb_epochs + 1):\n","  for batch_idx, samples in enumerate(dataloader):\n","\n","    x_train, y_train = samples\n","\n","    # H(x) 계산\n","    prediction = model(x_train)\n","\n","    # cost 계산\n","    cost = F.mse_loss(prediction, y_train)\n","\n","    # cost로 H(x) 계산\n","    optimizer.zero_grad()\n","    cost.backward()\n","    optimizer.step()\n","\n","    print('Epoch {:4d}/{} Batch {}/{} Cost: {:.6f}'.format(epoch, nb_epochs, batch_idx+1, len(dataloader), cost.item()))"],"execution_count":108,"outputs":[{"output_type":"stream","text":["Epoch    0/20 Batch 1/3 Cost: 20553.552734\n","Epoch    0/20 Batch 2/3 Cost: 8695.083984\n","Epoch    0/20 Batch 3/3 Cost: 2583.298096\n","Epoch    1/20 Batch 1/3 Cost: 481.475861\n","Epoch    1/20 Batch 2/3 Cost: 343.281616\n","Epoch    1/20 Batch 3/3 Cost: 85.759087\n","Epoch    2/20 Batch 1/3 Cost: 16.817707\n","Epoch    2/20 Batch 2/3 Cost: 3.829763\n","Epoch    2/20 Batch 3/3 Cost: 2.157227\n","Epoch    3/20 Batch 1/3 Cost: 0.773005\n","Epoch    3/20 Batch 2/3 Cost: 0.205466\n","Epoch    3/20 Batch 3/3 Cost: 0.270071\n","Epoch    4/20 Batch 1/3 Cost: 0.340178\n","Epoch    4/20 Batch 2/3 Cost: 0.282403\n","Epoch    4/20 Batch 3/3 Cost: 0.006335\n","Epoch    5/20 Batch 1/3 Cost: 0.174985\n","Epoch    5/20 Batch 2/3 Cost: 0.104362\n","Epoch    5/20 Batch 3/3 Cost: 0.520029\n","Epoch    6/20 Batch 1/3 Cost: 0.307227\n","Epoch    6/20 Batch 2/3 Cost: 0.032644\n","Epoch    6/20 Batch 3/3 Cost: 0.281125\n","Epoch    7/20 Batch 1/3 Cost: 0.046048\n","Epoch    7/20 Batch 2/3 Cost: 0.167404\n","Epoch    7/20 Batch 3/3 Cost: 0.686828\n","Epoch    8/20 Batch 1/3 Cost: 0.238974\n","Epoch    8/20 Batch 2/3 Cost: 0.107994\n","Epoch    8/20 Batch 3/3 Cost: 0.438793\n","Epoch    9/20 Batch 1/3 Cost: 0.276377\n","Epoch    9/20 Batch 2/3 Cost: 0.223968\n","Epoch    9/20 Batch 3/3 Cost: 0.026275\n","Epoch   10/20 Batch 1/3 Cost: 0.112607\n","Epoch   10/20 Batch 2/3 Cost: 0.301633\n","Epoch   10/20 Batch 3/3 Cost: 0.021177\n","Epoch   11/20 Batch 1/3 Cost: 0.290165\n","Epoch   11/20 Batch 2/3 Cost: 0.130901\n","Epoch   11/20 Batch 3/3 Cost: 0.095560\n","Epoch   12/20 Batch 1/3 Cost: 0.164618\n","Epoch   12/20 Batch 2/3 Cost: 0.418681\n","Epoch   12/20 Batch 3/3 Cost: 0.005800\n","Epoch   13/20 Batch 1/3 Cost: 0.104682\n","Epoch   13/20 Batch 2/3 Cost: 0.063849\n","Epoch   13/20 Batch 3/3 Cost: 0.642351\n","Epoch   14/20 Batch 1/3 Cost: 0.390589\n","Epoch   14/20 Batch 2/3 Cost: 0.041194\n","Epoch   14/20 Batch 3/3 Cost: 0.401205\n","Epoch   15/20 Batch 1/3 Cost: 0.060539\n","Epoch   15/20 Batch 2/3 Cost: 0.381500\n","Epoch   15/20 Batch 3/3 Cost: 0.239105\n","Epoch   16/20 Batch 1/3 Cost: 0.103792\n","Epoch   16/20 Batch 2/3 Cost: 0.323238\n","Epoch   16/20 Batch 3/3 Cost: 0.014686\n","Epoch   17/20 Batch 1/3 Cost: 0.254709\n","Epoch   17/20 Batch 2/3 Cost: 0.201392\n","Epoch   17/20 Batch 3/3 Cost: 0.201811\n","Epoch   18/20 Batch 1/3 Cost: 0.025897\n","Epoch   18/20 Batch 2/3 Cost: 0.406441\n","Epoch   18/20 Batch 3/3 Cost: 0.085402\n","Epoch   19/20 Batch 1/3 Cost: 0.167816\n","Epoch   19/20 Batch 2/3 Cost: 0.184889\n","Epoch   19/20 Batch 3/3 Cost: 0.197977\n","Epoch   20/20 Batch 1/3 Cost: 0.304128\n","Epoch   20/20 Batch 2/3 Cost: 0.115243\n","Epoch   20/20 Batch 3/3 Cost: 0.174124\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rWSg8gKEN2T9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"a995f207-073a-4abf-ee2c-94c2cfb72e2b","executionInfo":{"status":"ok","timestamp":1587799885917,"user_tz":-540,"elapsed":560,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}}},"source":["# 임의의 입력 [73, 80, 75]를 선언\n","new_var = torch.FloatTensor([[73, 80, 75]])\n","# 입력한 값 [73, 80, 75]에 대해서 예측값 y를 리턴 받아서 pred_y에 저장\n","pred_y = model(new_var)\n","print(\"훈련 후 입력이 73, 80, 75일 때의 예측값 :\", pred_y)"],"execution_count":109,"outputs":[{"output_type":"stream","text":["훈련 후 입력이 73, 80, 75일 때의 예측값 : tensor([[151.7642]], grad_fn=<AddmmBackward>)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2tBsC05EP4WY","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}