{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN_pytorch","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"PhZUb0WeMs0D","colab_type":"text"},"source":["# 모듈 가져오기"]},{"cell_type":"code","metadata":{"id":"XbNlP_pbHGqO","colab_type":"code","outputId":"18137b21-d283-4fd6-cae3-e70c11589ae2","executionInfo":{"status":"ok","timestamp":1586936791600,"user_tz":-540,"elapsed":6923,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["pip install torchgeometry"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting torchgeometry\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a6/d6/3f6820c0589bc3876080c59b58a3bad11af746a7b46f364b1cde7972bd72/torchgeometry-0.1.2-py2.py3-none-any.whl (42kB)\n","\r\u001b[K     |███████▋                        | 10kB 23.7MB/s eta 0:00:01\r\u001b[K     |███████████████▎                | 20kB 26.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 30kB 30.5MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▋ | 40kB 33.8MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 51kB 8.5MB/s \n","\u001b[?25hRequirement already satisfied: torch>=1.0.0 in /usr/local/lib/python3.6/dist-packages (from torchgeometry) (1.4.0)\n","Installing collected packages: torchgeometry\n","Successfully installed torchgeometry-0.1.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RFShPogxHnm6","colab_type":"code","outputId":"ba0a6519-4e16-404e-bac1-7616aa8e78ac","executionInfo":{"status":"error","timestamp":1589446059509,"user_tz":-540,"elapsed":4514,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":368}},"source":["# 모듈 불러오기\n","import torch\n","import torchgeometry as tgm\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import math\n","import pickle\n","import torchvision.transforms as transforms\n","from torch.utils.data import TensorDataset \n","from torch.utils.data import DataLoader"],"execution_count":0,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-28d4781ebe89>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 모듈 불러오기\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtorchgeometry\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtgm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torchgeometry'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"markdown","metadata":{"id":"qNRMlAq0MzGf","colab_type":"text"},"source":["# 필요한 데이터와 함수 가져오기"]},{"cell_type":"markdown","metadata":{"id":"Mwelq9U2M2yy","colab_type":"text"},"source":["## 데이터\n","\n","- X_diff_test\n","- X_diff_train\n","- y_train\n","- y_test"]},{"cell_type":"code","metadata":{"id":"KJ3Qv2JiPSxI","colab_type":"code","colab":{}},"source":["with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/y_test', 'rb') as f:\n","  y_test = pickle.load(f)\n","with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/y_train', 'rb') as f:\n","  y_train = pickle.load(f)\n","\n","\n","# with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_diff_test', 'rb') as f:\n","#   X_diff_test = pickle.load(f)\n","# with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_diff_train', 'rb') as f:\n","#   X_diff_train = pickle.load(f)\n","\n","# with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_k0_diff_train', 'rb') as f:\n","#   X_k0_diff_train = pickle.load(f)\n","# with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_k0_diff_test', 'rb') as f:\n","#   X_k0_diff_test= pickle.load(f)\n","\n","# with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_k45_diff_train', 'rb') as f:\n","#   X_k45_diff_train = pickle.load(f)\n","# with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_k45_diff_test', 'rb') as f:\n","#   X_k45_diff_test = pickle.load(f)\n","\n","with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_k90_diff_train', 'rb') as f:\n","  X_k90_diff_train = pickle.load(f)\n","with open('/content/drive/My Drive/Coffee_Inspection/참고자료/MINIST/X_k90_diff_test', 'rb') as f:\n","  X_k90_diff_test = pickle.load(f)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OZbWPBOVP5iA","colab_type":"text"},"source":["## 함수"]},{"cell_type":"code","metadata":{"id":"o9bozO0sP73P","colab_type":"code","colab":{}},"source":["# 사인커널함수\n","# return : (1, 1, kernel_size, kernel_size)\n","def makeSinKernel(kernel_size, angle = 0, n = 1, scale = 1 ):\n","  PI = math.pi\n","  \n","  height_k = 2 * kernel_size\n","  width_k = 2 * kernel_size\n","  scale = 1\n","\n","\n","  rng = torch.linspace(0, n*PI, steps = width_k)\n","  tmp = torch.sin(rng)\n","  kernel = tmp.expand(1,1,height_k,width_k) ** 2 / (tmp.expand(1,1,height_k,width_k) ** 2).max()\n","\n","  # rotation\n","  angle = torch.ones(1) * angle\n","\n","  # rotaion center 정의하기\n","  center = torch.ones(1,2) # (x,y)\n","  center[:,0] = int(kernel.shape[3] / 2)\n","  center[:,1] = int(kernel.shape[2] / 2) \n","\n","  # 스케일 factor\n","  scale = torch.ones(scale)\n","\n","  # 회전행렬 준비\n","  M = tgm.get_rotation_matrix2d(center, angle, scale)\n","\n","  # 회전행렬 적용하기\n","  _, _, h, w = kernel.shape\n","  img_warped_tmp = tgm.warp_affine(kernel, M, dsize=(h,w))\n","  img_warped = img_warped_tmp[:,:,int(center[:,0] - center[:,0]/2) : int(center[:,0] + center[:,0]/2) , int(center[:,0] - center[:,0]/2) : int(center[:,0] + center[:,0]/2) ]\n","  \n","  return img_warped"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"A-pfUFSxQ21J","colab_type":"code","colab":{}},"source":["# 커널이미지 확인 함수\n","# return : 2차원, 3차원 이미지 출력\n","def ImageKernel(kernel, elev=0, azim=0):\n","  Pi = math.pi\n","  \n","  kernel.shape[0]\n","  x = np.linspace(0, kernel.shape[0], kernel.shape[0])\n","  y = np.linspace(0, kernel.shape[1], kernel.shape[1])\n","  X,Y = np.meshgrid(x,y)\n","\n","  \n","  fig = plt.figure(figsize = (20,10))\n","  ax1 = fig.add_subplot(1,2,1)\n","  ax2 = fig.add_subplot(1,2,2, projection = '3d')\n","\n","  ax1.imshow(kernel)\n","  \n","  ax2.plot_surface(X,Y,kernel, cmap = 'viridis') # cmap = 'binary', 'gray', 'coolwarm', 'viridis')\n","  ax2.view_init(elev = elev, azim = azim)\n","   \n","  plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z6AMEhvgQJHG","colab_type":"text"},"source":["# 데이터 준비\n","- 신경망에 주입할 데이터를 정의 및 확인한다\n","- 신경망에 사용할 커널 함수를 정의 및 확인한다"]},{"cell_type":"code","metadata":{"id":"9lZkxDWLTrMP","colab_type":"code","colab":{}},"source":["# X_diff_train = torch.Size([60000, 28, 28])\n","# y_train = torch.Size([60000])\n","\n","# 데이터의 타입을 tensor로 변환\n","X_k90_diff_train = torch.Tensor(X_k90_diff_train)\n","y_train = torch.LongTensor(y_train)\n","X_k90_diff_test = torch.Tensor(X_k90_diff_test)\n","y_test = torch.LongTensor(y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UouVsSFMTrO9","colab_type":"code","colab":{}},"source":["# 데이터 차원 맞추기\n","X_k90_diff_train = X_k90_diff_train.unsqueeze(1)\n","X_k90_diff_test = X_k90_diff_test.unsqueeze(1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y_XPMvZsTrRz","colab_type":"code","outputId":"961c313b-a2c0-4400-d934-02b4a73c955f","executionInfo":{"status":"ok","timestamp":1586936806163,"user_tz":-540,"elapsed":21456,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"source":["# input_img 데이터의 size 정의 및 확인\n","# X_diff_train : torch.Size([60000(데이터수), 1(channel), 28(height), 28(width)])\n","# y_train      : torch.Size([6000(데이터수)])\n","X_k90_diff_train.size(), y_train.size(), X_k90_diff_test.size(), y_test.size(), X_k90_diff_train.dtype, y_train.dtype, X_k90_diff_test.dtype, y_test.dtype"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([60000, 1, 28, 28]),\n"," torch.Size([60000]),\n"," torch.Size([10000, 1, 28, 28]),\n"," torch.Size([10000]),\n"," torch.float32,\n"," torch.int64,\n"," torch.float32,\n"," torch.int64)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"C-CNv5SpW1N8","colab_type":"text"},"source":["# 신경망 준비"]},{"cell_type":"markdown","metadata":{"id":"87Q2PqodW3Vm","colab_type":"text"},"source":["## 하드웨어 준비"]},{"cell_type":"code","metadata":{"id":"qIqcHV1KW5Pu","colab_type":"code","colab":{}},"source":["# 만약 GPU를 사용 가능하다면 device 값이 cuda가 되고, 아니라면 cpu가 됩니다.\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","\n","# 랜덤 시드 고정\n","torch.manual_seed(777)\n","\n","# GPU 사용 가능일 경우 랜덤 시드 고정\n","if device == 'cuda':\n","    torch.cuda.manual_seed_all(777)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"a6B3RGXqXXb2","colab_type":"text"},"source":["## 데이터 로드 준비\n"]},{"cell_type":"code","metadata":{"id":"GaXN2OBuoTjL","colab_type":"code","outputId":"36cbb611-befc-4f0a-d9d3-74150798f196","executionInfo":{"status":"ok","timestamp":1586936806164,"user_tz":-540,"elapsed":21444,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["dataset = TensorDataset(X_k90_diff_train, y_train)\n","type(dataset)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.utils.data.dataset.TensorDataset"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"ObBVU0mloTll","colab_type":"code","colab":{}},"source":["learning_rate = 0.001\n","training_epochs = 15\n","batch_size = 100\n","\n","data_loader = torch.utils.data.DataLoader(dataset=dataset,\n","                                          batch_size=batch_size,\n","                                          shuffle=True,\n","                                          drop_last=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XeMspcLXX8PL","colab_type":"text"},"source":["## CNN 신경망"]},{"cell_type":"code","metadata":{"id":"NDIh4EloV7Qm","colab_type":"code","colab":{}},"source":["class CNN(torch.nn.Module):\n","\n","    def __init__(self):\n","        super(CNN, self).__init__()\n","        # 첫번째층\n","        # ImgIn shape=(?, 28, 28, 1)\n","        #    Conv     -> (?, 28, 28, 32)\n","        #    Pool     -> (?, 14, 14, 32)\n","        self.layer1 = torch.nn.Sequential(\n","            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),\n","            torch.nn.Tanh(),\n","            torch.nn.MaxPool2d(kernel_size=2, stride=2))\n","\n","        # 두번째층\n","        # ImgIn shape=(?, 14, 14, 32)\n","        #    Conv      ->(?, 14, 14, 64)\n","        #    Pool      ->(?, 7, 7, 64)\n","        self.layer2 = torch.nn.Sequential(\n","            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n","            torch.nn.Tanh(),\n","            torch.nn.MaxPool2d(kernel_size=2, stride=2))\n","\n","        # 전결합층 7x7x64 inputs -> 10 outputs\n","        self.fc = torch.nn.Linear(7 * 7 * 64, 10, bias=True)\n","\n","        # 전결합층 한정으로 가중치 초기화\n","        torch.nn.init.xavier_uniform_(self.fc.weight)\n","\n","    def forward(self, x):\n","        out = self.layer1(x)\n","        out = self.layer2(out)\n","        out = out.view(out.size(0), -1)   # 전결합층을 위해서 Flatten\n","        out = self.fc(out)\n","        return out"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Is11x9O5Yziy","colab_type":"text"},"source":["## 학습"]},{"cell_type":"code","metadata":{"id":"9T-JNQdlYy22","colab_type":"code","outputId":"0016373a-7836-4e61-e763-702179280fd6","executionInfo":{"status":"ok","timestamp":1586936854347,"user_tz":-540,"elapsed":69610,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":289}},"source":["# 모델을 정의합니다.\n","\n","# CNN 모델 정의\n","model = CNN().to(device)\n","# 비용 함수와 옵티마이저를 정의합니다.\n","\n","criterion = torch.nn.CrossEntropyLoss().to(device)    # 비용 함수에 소프트맥스 함수 포함되어져 있음.\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","# 총 배치의 수를 출력해보겠습니다.\n","\n","total_batch = len(data_loader)\n","print('총 배치의 수 : {}'.format(total_batch))\n","# 총 배치의 수 : 600\n","# 총 배치의 수는 600입니다. 그런데 배치 크기를 100으로 했으므로 결국 훈련 데이터는 총 60,000개란 의미입니다. 이제 모델을 훈련시켜보겠습니다. (시간이 꽤 오래 걸립니다.)\n","\n","for epoch in range(training_epochs):\n","    avg_cost = 0\n","\n","    for X, Y in data_loader: # 미니 배치 단위로 꺼내온다. X는 미니 배치, Y는 레이블.\n","        # image is already size of (28x28), no reshape\n","        # label is not one-hot encoded\n","        X = X.to(device)\n","        Y = Y.to(device)\n","\n","        optimizer.zero_grad()\n","        hypothesis = model(X)\n","        cost = criterion(hypothesis, Y)\n","        cost.backward()\n","        optimizer.step()\n","\n","        avg_cost += cost / total_batch\n","\n","    print('[Epoch: {:>4}] cost = {:>.9}'.format(epoch + 1, avg_cost))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["총 배치의 수 : 600\n","[Epoch:    1] cost = 0.928272724\n","[Epoch:    2] cost = 0.455307186\n","[Epoch:    3] cost = 0.348587662\n","[Epoch:    4] cost = 0.294966191\n","[Epoch:    5] cost = 0.260934442\n","[Epoch:    6] cost = 0.23572728\n","[Epoch:    7] cost = 0.215246305\n","[Epoch:    8] cost = 0.198539689\n","[Epoch:    9] cost = 0.184534758\n","[Epoch:   10] cost = 0.172442049\n","[Epoch:   11] cost = 0.161844179\n","[Epoch:   12] cost = 0.153086871\n","[Epoch:   13] cost = 0.143214166\n","[Epoch:   14] cost = 0.132693127\n","[Epoch:   15] cost = 0.126439214\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_aQ9HCnylS_2","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"5ggMdE4cX2nU","colab_type":"text"},"source":["# 테스트"]},{"cell_type":"code","metadata":{"id":"QuCOsNPsV7hx","colab_type":"code","outputId":"dd94a698-f512-4cd5-ceff-b3a850f49de3","executionInfo":{"status":"ok","timestamp":1586936854348,"user_tz":-540,"elapsed":69600,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# 학습을 진행하지 않을 것이므로 torch.no_grad()\n","with torch.no_grad():\n","    X_test = X_k90_diff_test.view(len(X_k90_diff_test), 1, 28, 28).float().to(device)\n","    Y_test = y_test.to(device)\n","\n","    prediction = model(X_test)\n","    correct_prediction = torch.argmax(prediction, 1) == Y_test\n","    accuracy = correct_prediction.float().mean()\n","    print('Accuracy:', accuracy.item())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Accuracy: 0.9457999467849731\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Qtoc1ZJaV7nc","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"a-aNMmTbY84I","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}