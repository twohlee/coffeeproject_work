{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Image_reconstruction","provenance":[],"collapsed_sections":[],"mount_file_id":"1K5Cd8gUjJpaOTBFCOIdqp4Y79_YoTgjw","authorship_tag":"ABX9TyPo75N5xt877t2YpDF8noqk"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"hA6o7_GBLxAO","colab_type":"code","colab":{}},"source":["# github에 있는 소스를 바로 끌어다가 쓸 수 있는 코드 짜자\n","# 모르겠으니까 찾아서 해결하든 물어서 해결하든 하자"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VwvabXGwMA1J","colab_type":"code","outputId":"d120a787-a295-4c5d-911e-fd46dce21270","executionInfo":{"status":"ok","timestamp":1585757925436,"user_tz":-540,"elapsed":353069,"user":{"displayName":"최병철","photoUrl":"","userId":"01193415252208162756"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import numpy as np\n","import numpy.fft as fft\n","# import scipy.ndimage as nd => 없어졌다.\n","import PIL\n","import scipy.misc as misc\n","from math import pi\n","\n","#Read in source image\n","# source = nd.imread(\"einstein.bmp\", flatten=True) # 이코드는 이제 없어져서 안된다\n","img = PIL.Image.open('/content/drive/My Drive/Coffee_Inspection/Image-Reconstruction-master/einstein.bmp',)\n","source = np.array(img.convert('L'))\n","\n","#Pad image to simulate oversampling\n","pad_len = len(source)\n","padded = np.pad(source, ((pad_len, pad_len),(pad_len, pad_len)), 'constant', \n","                constant_values=((0,0),(0,0)))\n","\n","ft = fft.fft2(padded)\n","\n","#simulate diffraction pattern\n","diffract = np.abs(ft)\n","\n","l = len(padded)\n","\n","#keep track of where the image is vs the padding\n","mask = np.ones((pad_len+2,pad_len+2))\n","mask = np.pad(mask, ((pad_len-1, pad_len-1),(pad_len-1, pad_len-1)), 'constant', \n","                constant_values=((0,0),(0,0)))\n","\n","#Initial guess using random phase info\n","guess = diffract * np.exp(1j * np.random.rand(l,l) * 2 * pi)\n","\n","#number of iterations\n","r = 801\n","\n","#step size parameter\n","beta = 0.8\n","\n","#previous result\n","prev = None\n","for s in range(0,r):\n","    #apply fourier domain constraints\n","    update = diffract * np.exp(1j * np.angle(guess)) \n","    \n","    inv = fft.ifft2(update)\n","    inv = np.real(inv)\n","    if prev is None:\n","        prev = inv\n","        \n","    #apply real-space constraints\n","    temp = inv\n","    for i in range(0,l):\n","        for j in range(0,l):\n","            #image region must be positive\n","            if inv[i,j] < 0 and mask[i,j] == 1:\n","                inv[i,j] = prev[i,j] - beta*inv[i,j]\n","            #push support region intensity toward zero\n","            if mask[i,j] == 0:\n","                inv[i,j] = prev[i,j] - beta*inv[i,j]\n","    \n","  \n","        \n","    #save an image of the progress\n","    if s % 10 == 0: \n","        # misc.imsave(\"/Users/chasegoddard/Stuff/CDI/code/save/progress\" + str(s) + \".bmp\", prev) => misc에 imsave 코드 없어졌다.\n","        prev = PIL.Image.fromarray(prev).convert('L')\n","        prev.save('/content/drive/My Drive/Coffee_Inspection/progress/' + str(s) + \".jpg\")\n","        print(s)\n","\n","      \n","    prev = temp\n","    \n","    guess = fft.fft2(inv)\n"],"execution_count":12,"outputs":[{"output_type":"stream","text":["0\n","10\n","20\n","30\n","40\n","50\n","60\n","70\n","80\n","90\n","100\n","110\n","120\n","130\n","140\n","150\n","160\n","170\n","180\n","190\n","200\n","210\n","220\n","230\n","240\n","250\n","260\n","270\n","280\n","290\n","300\n","310\n","320\n","330\n","340\n","350\n","360\n","370\n","380\n","390\n","400\n","410\n","420\n","430\n","440\n","450\n","460\n","470\n","480\n","490\n","500\n","510\n","520\n","530\n","540\n","550\n","560\n","570\n","580\n","590\n","600\n","610\n","620\n","630\n","640\n","650\n","660\n","670\n","680\n","690\n","700\n","710\n","720\n","730\n","740\n","750\n","760\n","770\n","780\n","790\n","800\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2UEiVU-zP8AJ","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}