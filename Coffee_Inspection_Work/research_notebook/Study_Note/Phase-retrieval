{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Phase-retrieval","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1gAZJsYUnjK9j3ylix9R9HadrFpMCQJg8","authorship_tag":"ABX9TyPOnzHGf+IxutLQy8TMcsK+"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"Hqi7Vv6QQVpX","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","def fienup_phase_retrieval(mag, mask=None, beta=0.8, \n","                           steps=200, mode='hybrid', verbose=True):\n","    \"\"\"\n","    Implementation of Fienup's phase-retrieval methods. This function\n","    implements the input-output, the output-output and the hybrid method.\n","    \n","    Note: Mode 'output-output' and beta=1 results in \n","    the Gerchberg-Saxton algorithm.\n","    \n","    Parameters:\n","        mag: Measured magnitudes of Fourier transform\n","        mask: Binary array indicating where the image should be\n","              if padding is known\n","        beta: Positive step size\n","        steps: Number of iterations\n","        mode: Which algorithm to use\n","              (can be 'input-output', 'output-output' or 'hybrid')\n","        verbose: If True, progress is shown\n","    \n","    Returns:\n","        x: Reconstructed image\n","    \n","    Author: Tobias Uelwer\n","    Date: 30.12.2018\n","    \n","    References:\n","    [1] E. Osherovich, Numerical methods for phase retrieval, 2012,\n","        https://arxiv.org/abs/1203.4756\n","    [2] J. R. Fienup, Phase retrieval algorithms: a comparison, 1982,\n","        https://www.osapublishing.org/ao/abstract.cfm?uri=ao-21-15-2758\n","    [3] https://github.com/cwg45/Image-Reconstruction\n","    \"\"\"\n","    \n","    assert beta > 0, 'step size must be a positive number'\n","    assert steps > 0, 'steps must be a positive number'\n","    assert mode == 'input-output' or mode == 'output-output'\\\n","        or mode == 'hybrid',\\\n","    'mode must be \\'input-output\\', \\'output-output\\' or \\'hybrid\\''\n","    \n","    if mask is None:\n","        mask = np.ones(mag.shape)\n","        \n","    assert mag.shape == mask.shape, 'mask and mag must have same shape'\n","    \n","    # sample random phase and initialize image x \n","    y_hat = mag*np.exp(1j*2*np.pi*np.random.rand(*mag.shape))\n","    x = np.zeros(mag.shape)\n","    \n","    # previous iterate\n","    x_p = None\n","        \n","    # main loop\n","    for i in range(1, steps+1):\n","        # show progress\n","        if i % 100 == 0 and verbose: \n","            print(\"step\", i, \"of\", steps)\n","        \n","        # inverse fourier transform\n","        y = np.real(np.fft.ifft2(y_hat))\n","        \n","        # previous iterate\n","        if x_p is None:\n","            x_p = y\n","        else:\n","            x_p = x \n","        \n","        # updates for elements that satisfy object domain constraints\n","        if mode == \"output-output\" or mode == \"hybrid\":\n","            x = y\n","            \n","        # find elements that violate object domain constraints \n","        # or are not masked\n","        indices = np.logical_or(np.logical_and(y<0, mask), \n","                                np.logical_not(mask))\n","        \n","        # updates for elements that violate object domain constraints\n","        if mode == \"hybrid\" or mode == \"input-output\":\n","            x[indices] = x_p[indices]-beta*y[indices] \n","        elif mode == \"output-output\":\n","            x[indices] = y[indices]-beta*y[indices] \n","        \n","        # fourier transform\n","        x_hat = np.fft.fft2(x)\n","        \n","        # satisfy fourier domain constraints\n","        # (replace magnitude with input magnitude)\n","        y_hat = mag*np.exp(1j*np.angle(x_hat))\n","    return x\n"],"execution_count":0,"outputs":[]}]}